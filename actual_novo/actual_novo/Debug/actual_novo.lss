
actual_novo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000902  00000996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  0000099c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5e  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f3  00000000  00000000  0000253e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000963  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000712  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000115d  00000000  00000000  000042f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	12 01       	movw	r2, r4

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e2 e0       	ldi	r30, 0x02	; 2
  6a:	f9 e0       	ldi	r31, 0x09	; 9
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a6 36       	cpi	r26, 0x66	; 102
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a6 e6       	ldi	r26, 0x66	; 102
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 36       	cpi	r26, 0x6A	; 106
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  a2:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z41__static_initialization_and_destruction_0ii>:
			
			PORTA = 0xff;*/
		}
	
	}
}
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <_Z41__static_initialization_and_destruction_0ii+0x1a>
  ae:	6f 3f       	cpi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z41__static_initialization_and_destruction_0ii+0x1a>
		sendz(str[i]);
		i++;
	}
}

MFRC522 abc(4,0);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	64 e0       	ldi	r22, 0x04	; 4
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	86 e6       	ldi	r24, 0x66	; 102
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN7MFRC522C1Eii>
  c4:	08 95       	ret

000000c6 <_Z5sendzh>:

#include "RFID.h"

void sendz(uint8_t c)
{
	while(bit_is_clear(UCSRA,UDRE));// doi den khi bit UDRE = 1
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <_Z5sendzh>
	UDR = c;
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <_Z14SPI_MasterInitv>:
}
void SPI_MasterInit(void)
{
	DDRB |= (1<<SCK_PIN)|(1<<MOSI_PIN)|(1<<SS);
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	80 6b       	ori	r24, 0xB0	; 176
  d2:	87 bb       	out	0x17, r24	; 23
	//PORTB|=(1<<MISO_PIN);
	SPCR |=	(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	81 65       	ori	r24, 0x51	; 81
  d8:	8d b9       	out	0x0d, r24	; 13
	sbi(PORTB,SS);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	88 bb       	out	0x18, r24	; 24
  e0:	08 95       	ret

000000e2 <_Z11_SendStringPc>:
}


void _SendString(char str[])
{
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	8c 01       	movw	r16, r24
	int i =0;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (str[i] != 0x00)
  f0:	f8 01       	movw	r30, r16
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <_Z11_SendStringPc+0x22>
	{
		sendz(str[i]);
  fc:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z5sendzh>
		i++;
 100:	21 96       	adiw	r28, 0x01	; 1

void _SendString(char str[])
{
	int i =0;
	
	while (str[i] != 0x00)
 102:	f6 cf       	rjmp	.-20     	; 0xf0 <_Z11_SendStringPc+0xe>
	{
		sendz(str[i]);
		i++;
	}
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <main>:

MFRC522 abc(4,0);

int main(void)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	60 97       	sbiw	r28, 0x10	; 16
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
 122:	1f ef       	ldi	r17, 0xFF	; 255
 124:	1a bb       	out	0x1a, r17	; 26
	PORTA = 0xff;
 126:	1b bb       	out	0x1b, r17	; 27
	
	SPI_MasterInit();
 128:	0e 94 67 00 	call	0xce	; 0xce <_Z14SPI_MasterInitv>
	
	UBRRL = 103;
 12c:	87 e6       	ldi	r24, 0x67	; 103
 12e:	89 b9       	out	0x09, r24	; 9
	UCSRC =	(1<<URSEL)|(1 << UCSZ1) | (1 << UCSZ0); // k chon UBRRch va chon mode 8bit
 130:	86 e8       	ldi	r24, 0x86	; 134
 132:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1 << TXEN); //EN rx,tx,ngat
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	8a b9       	out	0x0a, r24	; 10
	DDRA = 0xff;
 138:	1a bb       	out	0x1a, r17	; 26
	abc.begin();
 13a:	86 e6       	ldi	r24, 0x66	; 102
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN7MFRC5225beginEv>
	_SendString("START");
 142:	80 e6       	ldi	r24, 0x60	; 96
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z11_SendStringPc>
	{
		
		uint8_t status;
		uint8_t data[MAX_LEN];
		
		status = abc.requestTag(MF1_REQIDL, data);
 14a:	ae 01       	movw	r20, r28
 14c:	4f 5f       	subi	r20, 0xFF	; 255
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	66 e2       	ldi	r22, 0x26	; 38
 152:	86 e6       	ldi	r24, 0x66	; 102
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN7MFRC52210requestTagEhPh>
		//sendz(status);
		if (status == MI_OK) {
 15a:	81 11       	cpse	r24, r1
 15c:	f6 cf       	rjmp	.-20     	; 0x14a <main+0x3c>
			PORTA = 0xfe;
 15e:	8e ef       	ldi	r24, 0xFE	; 254
 160:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x5a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x64>
 172:	00 00       	nop
			_delay_ms(1000);
			
			PORTA = 0xff;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	8b bb       	out	0x1b, r24	; 27

			status = abc.antiCollision(data);
 178:	be 01       	movw	r22, r28
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	86 e6       	ldi	r24, 0x66	; 102
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN7MFRC52213antiCollisionEPh>
			
			for (int i = 0; i < 5; i++) {
 186:	e1 2c       	mov	r14, r1
 188:	f1 2c       	mov	r15, r1
			PORTA = 0xfe;
			_delay_ms(1000);
			
			PORTA = 0xff;

			status = abc.antiCollision(data);
 18a:	c1 2c       	mov	r12, r1
 18c:	d1 2c       	mov	r13, r1
			
			for (int i = 0; i < 5; i++) {
 18e:	e5 e0       	ldi	r30, 0x05	; 5
 190:	ee 16       	cp	r14, r30
 192:	f1 04       	cpc	r15, r1
 194:	84 f5       	brge	.+96     	; 0x1f6 <main+0xe8>
				sendz(data[i]);
 196:	01 e0       	ldi	r16, 0x01	; 1
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	0c 0f       	add	r16, r28
 19c:	1d 1f       	adc	r17, r29
 19e:	0e 0d       	add	r16, r14
 1a0:	1f 1d       	adc	r17, r15
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	0e 94 63 00 	call	0xc6	; 0xc6 <_Z5sendzh>
						
			switch(data[i])
 1aa:	f8 01       	movw	r30, r16
 1ac:	80 81       	ld	r24, Z
 1ae:	85 39       	cpi	r24, 0x95	; 149
 1b0:	d9 f0       	breq	.+54     	; 0x1e8 <main+0xda>
 1b2:	28 f4       	brcc	.+10     	; 0x1be <main+0xb0>
 1b4:	83 31       	cpi	r24, 0x13	; 19
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <main+0xca>
 1b8:	85 38       	cpi	r24, 0x85	; 133
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <main+0xba>
 1bc:	18 c0       	rjmp	.+48     	; 0x1ee <main+0xe0>
 1be:	88 3a       	cpi	r24, 0xA8	; 168
 1c0:	39 f0       	breq	.+14     	; 0x1d0 <main+0xc2>
 1c2:	8b 3a       	cpi	r24, 0xAB	; 171
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <main+0xd2>
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <main+0xe0>
			{
				case 0x85:
				count++;
 1c8:	ff ef       	ldi	r31, 0xFF	; 255
 1ca:	cf 1a       	sub	r12, r31
 1cc:	df 0a       	sbc	r13, r31
				break;
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <main+0xe0>
				
				case 0xA8:
				count++;
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	c2 1a       	sub	r12, r18
 1d4:	d2 0a       	sbc	r13, r18
				break;
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <main+0xe0>
				
				case 0x13:
				count++;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	c8 1a       	sub	r12, r24
 1dc:	d8 0a       	sbc	r13, r24
				break;
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <main+0xe0>
				
				case 0xAB:
				count++;
 1e0:	9f ef       	ldi	r25, 0xFF	; 255
 1e2:	c9 1a       	sub	r12, r25
 1e4:	d9 0a       	sbc	r13, r25
				break;
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <main+0xe0>
				
				case 0x95:
				count++;
 1e8:	ef ef       	ldi	r30, 0xFF	; 255
 1ea:	ce 1a       	sub	r12, r30
 1ec:	de 0a       	sbc	r13, r30
			
			PORTA = 0xff;

			status = abc.antiCollision(data);
			
			for (int i = 0; i < 5; i++) {
 1ee:	ff ef       	ldi	r31, 0xFF	; 255
 1f0:	ef 1a       	sub	r14, r31
 1f2:	ff 0a       	sbc	r15, r31
 1f4:	cc cf       	rjmp	.-104    	; 0x18e <main+0x80>
				case 0x95:
				count++;
				break;
			}
		}
			if(count == 5)
 1f6:	25 e0       	ldi	r18, 0x05	; 5
 1f8:	c2 16       	cp	r12, r18
 1fa:	d1 04       	cpc	r13, r1
 1fc:	21 f4       	brne	.+8      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
			{
				sbi(PORTA,0);
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	81 60       	ori	r24, 0x01	; 1
 202:	8b bb       	out	0x1b, r24	; 27
 204:	03 c0       	rjmp	.+6      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
				count=0;
			}
			else
			{
				 count = 0;
				 cbi(PORTA,0);
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	8b bb       	out	0x1b, r24	; 27
			}
			abc.selectTag(data);
 20c:	be 01       	movw	r22, r28
 20e:	6f 5f       	subi	r22, 0xFF	; 255
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	86 e6       	ldi	r24, 0x66	; 102
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN7MFRC5229selectTagEPh>

			// Stop the tag and get ready for reading a new tag.
			abc.haltTag();
 21a:	86 e6       	ldi	r24, 0x66	; 102
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN7MFRC5227haltTagEv>
	UCSRB = (1 << TXEN); //EN rx,tx,ngat
	DDRA = 0xff;
	abc.begin();
	_SendString("START");
	int count = 0;
	while(1)
 222:	93 cf       	rjmp	.-218    	; 0x14a <main+0x3c>

00000224 <_GLOBAL__sub_I__Z5sendzh>:
			
			PORTA = 0xff;*/
		}
	
	}
}
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	7f ef       	ldi	r23, 0xFF	; 255
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 55 00 	call	0xaa	; 0xaa <_Z41__static_initialization_and_destruction_0ii>
 230:	08 95       	ret

00000232 <_Z18SPI_MasterTransmith>:

uint8_t MFRC522::getFirmwareVersion() {
	uint8_t response;
	response = readFromRegister(0x37);
	return response;
}
 232:	8f b9       	out	0x0f, r24	; 15
 234:	77 9b       	sbis	0x0e, 7	; 14
 236:	fe cf       	rjmp	.-4      	; 0x234 <_Z18SPI_MasterTransmith+0x2>
 238:	8f b1       	in	r24, 0x0f	; 15
 23a:	08 95       	ret

0000023c <_ZN7MFRC522C1Eii>:
 23c:	fc 01       	movw	r30, r24
 23e:	60 83       	st	Z, r22
 240:	71 83       	std	Z+1, r23	; 0x01
 242:	77 b3       	in	r23, 0x17	; 23
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	c9 01       	movw	r24, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <_ZN7MFRC522C1Eii+0x14>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <_ZN7MFRC522C1Eii+0x10>
 254:	87 2b       	or	r24, r23
 256:	87 bb       	out	0x17, r24	; 23
 258:	68 b3       	in	r22, 0x18	; 24
 25a:	c9 01       	movw	r24, r18
 25c:	00 80       	ld	r0, Z
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_ZN7MFRC522C1Eii+0x28>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <_ZN7MFRC522C1Eii+0x24>
 268:	86 2b       	or	r24, r22
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	42 83       	std	Z+2, r20	; 0x02
 26e:	53 83       	std	Z+3, r21	; 0x03
 270:	57 b3       	in	r21, 0x17	; 23
 272:	c9 01       	movw	r24, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <_ZN7MFRC522C1Eii+0x3e>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	4a 95       	dec	r20
 27c:	e2 f7       	brpl	.-8      	; 0x276 <_ZN7MFRC522C1Eii+0x3a>
 27e:	85 2b       	or	r24, r21
 280:	87 bb       	out	0x17, r24	; 23
 282:	88 b3       	in	r24, 0x18	; 24
 284:	02 80       	ldd	r0, Z+2	; 0x02
 286:	02 c0       	rjmp	.+4      	; 0x28c <_ZN7MFRC522C1Eii+0x50>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <_ZN7MFRC522C1Eii+0x4c>
 290:	28 2b       	or	r18, r24
 292:	28 bb       	out	0x18, r18	; 24
 294:	08 95       	ret

00000296 <_ZN7MFRC52215writeToRegisterEhh>:
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	8c 01       	movw	r16, r24
 2a2:	f4 2e       	mov	r15, r20
 2a4:	98 b3       	in	r25, 0x18	; 24
 2a6:	c1 e0       	ldi	r28, 0x01	; 1
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	9e 01       	movw	r18, r28
 2ac:	f8 01       	movw	r30, r16
 2ae:	00 80       	ld	r0, Z
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_ZN7MFRC52215writeToRegisterEhh+0x20>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_ZN7MFRC52215writeToRegisterEhh+0x1c>
 2ba:	82 2f       	mov	r24, r18
 2bc:	80 95       	com	r24
 2be:	89 23       	and	r24, r25
 2c0:	88 bb       	out	0x18, r24	; 24
 2c2:	86 2f       	mov	r24, r22
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	8e 77       	andi	r24, 0x7E	; 126
 2cc:	0e 94 19 01 	call	0x232	; 0x232 <_Z18SPI_MasterTransmith>
 2d0:	8f 2d       	mov	r24, r15
 2d2:	0e 94 19 01 	call	0x232	; 0x232 <_Z18SPI_MasterTransmith>
 2d6:	88 b3       	in	r24, 0x18	; 24
 2d8:	f8 01       	movw	r30, r16
 2da:	00 80       	ld	r0, Z
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <_ZN7MFRC52215writeToRegisterEhh+0x4c>
 2de:	cc 0f       	add	r28, r28
 2e0:	dd 1f       	adc	r29, r29
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <_ZN7MFRC52215writeToRegisterEhh+0x48>
 2e6:	c8 2b       	or	r28, r24
 2e8:	c8 bb       	out	0x18, r28	; 24
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	08 95       	ret

000002f6 <_ZN7MFRC52216readFromRegisterEh>:
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	8c 01       	movw	r16, r24
 300:	98 b3       	in	r25, 0x18	; 24
 302:	c1 e0       	ldi	r28, 0x01	; 1
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	9e 01       	movw	r18, r28
 308:	f8 01       	movw	r30, r16
 30a:	00 80       	ld	r0, Z
 30c:	02 c0       	rjmp	.+4      	; 0x312 <_ZN7MFRC52216readFromRegisterEh+0x1c>
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	0a 94       	dec	r0
 314:	e2 f7       	brpl	.-8      	; 0x30e <_ZN7MFRC52216readFromRegisterEh+0x18>
 316:	82 2f       	mov	r24, r18
 318:	80 95       	com	r24
 31a:	89 23       	and	r24, r25
 31c:	88 bb       	out	0x18, r24	; 24
 31e:	86 2f       	mov	r24, r22
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	8e 77       	andi	r24, 0x7E	; 126
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	0e 94 19 01 	call	0x232	; 0x232 <_Z18SPI_MasterTransmith>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 19 01 	call	0x232	; 0x232 <_Z18SPI_MasterTransmith>
 334:	98 b3       	in	r25, 0x18	; 24
 336:	f8 01       	movw	r30, r16
 338:	00 80       	ld	r0, Z
 33a:	02 c0       	rjmp	.+4      	; 0x340 <_ZN7MFRC52216readFromRegisterEh+0x4a>
 33c:	cc 0f       	add	r28, r28
 33e:	dd 1f       	adc	r29, r29
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <_ZN7MFRC52216readFromRegisterEh+0x46>
 344:	c9 2b       	or	r28, r25
 346:	c8 bb       	out	0x18, r28	; 24
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <_ZN7MFRC5225resetEv>:
	sbi(PORTB,_sad);
	return val;
}

void MFRC522::reset() {
	writeToRegister(CommandReg, MFRC522_SOFTRESET);
 352:	4f e0       	ldi	r20, 0x0F	; 15
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
 35a:	08 95       	ret

0000035c <_ZN7MFRC52210setBitMaskEhh>:
}

void MFRC522::setBitMask(uint8_t addr, uint8_t mask) {
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	8c 01       	movw	r16, r24
 366:	d6 2f       	mov	r29, r22
 368:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 36a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current | mask);
 36e:	48 2f       	mov	r20, r24
 370:	4c 2b       	or	r20, r28
 372:	6d 2f       	mov	r22, r29
 374:	c8 01       	movw	r24, r16
 376:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <_ZN7MFRC52212clearBitMaskEhh>:

void MFRC522::clearBitMask(uint8_t addr, uint8_t mask) {
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	8c 01       	movw	r16, r24
 38e:	d6 2f       	mov	r29, r22
 390:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 392:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current & (~mask));
 396:	c0 95       	com	r28
 398:	4c 2f       	mov	r20, r28
 39a:	48 23       	and	r20, r24
 39c:	6d 2f       	mov	r22, r29
 39e:	c8 01       	movw	r24, r16
 3a0:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <_ZN7MFRC5225beginEv>:

void MFRC522::begin() {
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	ec 01       	movw	r28, r24
	sbi(PORTB,_sad);
 3b4:	28 b3       	in	r18, 0x18	; 24
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	08 80       	ld	r0, Y
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <_ZN7MFRC5225beginEv+0x14>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <_ZN7MFRC5225beginEv+0x10>
 3c6:	82 2b       	or	r24, r18
 3c8:	88 bb       	out	0x18, r24	; 24

	reset();
 3ca:	ce 01       	movw	r24, r28
 3cc:	0e 94 a9 01 	call	0x352	; 0x352 <_ZN7MFRC5225resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms == 3390 * 48 / 6.78
	writeToRegister(TModeReg, 0x8D);       // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 3d0:	4d e8       	ldi	r20, 0x8D	; 141
 3d2:	6a e2       	ldi	r22, 0x2A	; 42
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TPrescalerReg, 0x3E);  // TModeReg[3..0] + TPrescalerReg
 3da:	4e e3       	ldi	r20, 0x3E	; 62
 3dc:	6b e2       	ldi	r22, 0x2B	; 43
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegL, 30);		//48
 3e4:	4e e1       	ldi	r20, 0x1E	; 30
 3e6:	6d e2       	ldi	r22, 0x2D	; 45
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegH, 0);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	6c e2       	ldi	r22, 0x2C	; 44
 3f2:	ce 01       	movw	r24, r28
 3f4:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	writeToRegister(TxAutoReg, 0x40);      // 100%ASK
 3f8:	40 e4       	ldi	r20, 0x40	; 64
 3fa:	65 e1       	ldi	r22, 0x15	; 21
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(ModeReg, 0x3D);        // CRC initial value 0x6363
 402:	4d e3       	ldi	r20, 0x3D	; 61
 404:	61 e1       	ldi	r22, 0x11	; 17
 406:	ce 01       	movw	r24, r28
 408:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
 40c:	43 e0       	ldi	r20, 0x03	; 3
 40e:	64 e1       	ldi	r22, 0x14	; 20
 410:	ce 01       	movw	r24, r28
 412:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7MFRC52210setBitMaskEhh>
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <_ZN7MFRC52210commandTagEhPhiS0_Pi>:

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
 41c:	5f 92       	push	r5
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
 43c:	76 2e       	mov	r7, r22
 43e:	5a 01       	movw	r10, r20
 440:	69 01       	movw	r12, r18
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
 442:	8c e0       	ldi	r24, 0x0C	; 12
 444:	68 17       	cp	r22, r24
 446:	31 f0       	breq	.+12     	; 0x454 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x38>
 448:	9e e0       	ldi	r25, 0x0E	; 14
 44a:	69 17       	cp	r22, r25
 44c:	61 f0       	breq	.+24     	; 0x466 <__stack+0x7>
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 44e:	61 2c       	mov	r6, r1
	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
 450:	51 2c       	mov	r5, r1
 452:	10 c0       	rjmp	.+32     	; 0x474 <__stack+0x15>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 454:	0f 2e       	mov	r0, r31
 456:	f0 e3       	ldi	r31, 0x30	; 48
 458:	6f 2e       	mov	r6, r31
 45a:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 45c:	0f 2e       	mov	r0, r31
 45e:	f7 e7       	ldi	r31, 0x77	; 119
 460:	5f 2e       	mov	r5, r31
 462:	f0 2d       	mov	r31, r0
		waitIRq = 0x30;
		break;
 464:	07 c0       	rjmp	.+14     	; 0x474 <__stack+0x15>
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
 466:	68 94       	set
 468:	66 24       	eor	r6, r6
 46a:	64 f8       	bld	r6, 4
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
 46c:	0f 2e       	mov	r0, r31
 46e:	f2 e1       	ldi	r31, 0x12	; 18
 470:	5f 2e       	mov	r5, r31
 472:	f0 2d       	mov	r31, r0
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 474:	45 2d       	mov	r20, r5
 476:	40 68       	ori	r20, 0x80	; 128
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 480:	40 e8       	ldi	r20, 0x80	; 128
 482:	64 e0       	ldi	r22, 0x04	; 4
 484:	ce 01       	movw	r24, r28
 486:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	6a e0       	ldi	r22, 0x0A	; 10
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 49e:	81 2c       	mov	r8, r1
 4a0:	91 2c       	mov	r9, r1
 4a2:	8c 14       	cp	r8, r12
 4a4:	9d 04       	cpc	r9, r13
 4a6:	64 f4       	brge	.+24     	; 0x4c0 <__stack+0x61>
		writeToRegister(FIFODataReg, data[i]);
 4a8:	f5 01       	movw	r30, r10
 4aa:	e8 0d       	add	r30, r8
 4ac:	f9 1d       	adc	r31, r9
 4ae:	40 81       	ld	r20, Z
 4b0:	69 e0       	ldi	r22, 0x09	; 9
 4b2:	ce 01       	movw	r24, r28
 4b4:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4b8:	ef ef       	ldi	r30, 0xFF	; 255
 4ba:	8e 1a       	sub	r8, r30
 4bc:	9e 0a       	sbc	r9, r30
 4be:	f1 cf       	rjmp	.-30     	; 0x4a2 <__stack+0x43>
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 4c0:	47 2d       	mov	r20, r7
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	ce 01       	movw	r24, r28
 4c6:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>
	if (cmd == MFRC522_TRANSCEIVE) {
 4ca:	fc e0       	ldi	r31, 0x0C	; 12
 4cc:	7f 12       	cpse	r7, r31
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__stack+0x7b>
		setBitMask(BitFramingReg, 0x80);  // StartSend=1, transmission of data starts
 4d0:	40 e8       	ldi	r20, 0x80	; 128
 4d2:	6d e0       	ldi	r22, 0x0D	; 13
 4d4:	ce 01       	movw	r24, r28
 4d6:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7MFRC52210setBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4da:	0f 2e       	mov	r0, r31
 4dc:	f9 e1       	ldi	r31, 0x19	; 25
 4de:	cf 2e       	mov	r12, r31
 4e0:	d1 2c       	mov	r13, r1
 4e2:	f0 2d       	mov	r31, r0
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	97 e2       	ldi	r25, 0x27	; 39
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__stack+0x89>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__stack+0x8f>
 4ee:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 4f0:	64 e0       	ldi	r22, 0x04	; 4
 4f2:	ce 01       	movw	r24, r28
 4f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 4f8:	b8 2e       	mov	r11, r24
		i--;
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	c9 1a       	sub	r12, r25
 4fe:	d1 08       	sbc	r13, r1
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 500:	29 f0       	breq	.+10     	; 0x50c <__stack+0xad>
 502:	80 fd       	sbrc	r24, 0
 504:	03 c0       	rjmp	.+6      	; 0x50c <__stack+0xad>
 506:	86 2d       	mov	r24, r6
 508:	8b 21       	and	r24, r11
 50a:	61 f3       	breq	.-40     	; 0x4e4 <__stack+0x85>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 50c:	40 e8       	ldi	r20, 0x80	; 128
 50e:	6d e0       	ldi	r22, 0x0D	; 13
 510:	ce 01       	movw	r24, r28
 512:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7MFRC52212clearBitMaskEhh>

	if (i != 0) { // Request did not time out.
 516:	cd 28       	or	r12, r13
 518:	09 f4       	brne	.+2      	; 0x51c <__stack+0xbd>
 51a:	57 c0       	rjmp	.+174    	; 0x5ca <__stack+0x16b>
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
 51c:	66 e0       	ldi	r22, 0x06	; 6
 51e:	ce 01       	movw	r24, r28
 520:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 524:	8d 71       	andi	r24, 0x1D	; 29
 526:	09 f0       	breq	.+2      	; 0x52a <__stack+0xcb>
 528:	55 c0       	rjmp	.+170    	; 0x5d4 <__stack+0x175>
			status = MI_OK;
			if (n & irqEn & 0x01) {
 52a:	b5 20       	and	r11, r5
 52c:	b0 fc       	sbrc	r11, 0
 52e:	03 c0       	rjmp	.+6      	; 0x536 <__stack+0xd7>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
			status = MI_OK;
 530:	c1 2c       	mov	r12, r1
 532:	d1 2c       	mov	r13, r1
 534:	03 c0       	rjmp	.+6      	; 0x53c <__stack+0xdd>
			if (n & irqEn & 0x01) {
				status = MI_NOTAGERR;
 536:	cc 24       	eor	r12, r12
 538:	c3 94       	inc	r12
 53a:	d1 2c       	mov	r13, r1
			}

			if (cmd == MFRC522_TRANSCEIVE) {
 53c:	ec e0       	ldi	r30, 0x0C	; 12
 53e:	7e 12       	cpse	r7, r30
 540:	4d c0       	rjmp	.+154    	; 0x5dc <__stack+0x17d>
				n = readFromRegister(FIFOLevelReg);
 542:	6a e0       	ldi	r22, 0x0A	; 10
 544:	ce 01       	movw	r24, r28
 546:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 54a:	98 2e       	mov	r9, r24
				lastBits = readFromRegister(ControlReg) & 0x07;
 54c:	6c e0       	ldi	r22, 0x0C	; 12
 54e:	ce 01       	movw	r24, r28
 550:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 554:	28 2f       	mov	r18, r24
 556:	27 70       	andi	r18, 0x07	; 7
				if (lastBits) {
 558:	79 f0       	breq	.+30     	; 0x578 <__stack+0x119>
					*rlen = (n-1)*8 + lastBits;
 55a:	89 2d       	mov	r24, r9
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	82 0f       	add	r24, r18
 56e:	91 1d       	adc	r25, r1
 570:	f7 01       	movw	r30, r14
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
 576:	0b c0       	rjmp	.+22     	; 0x58e <__stack+0x12f>
					} else {
					*rlen = n*8;
 578:	89 2d       	mov	r24, r9
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	f7 01       	movw	r30, r14
 58a:	91 83       	std	Z+1, r25	; 0x01
 58c:	80 83       	st	Z, r24
				}

				if (n == 0) {
 58e:	91 10       	cpse	r9, r1
 590:	02 c0       	rjmp	.+4      	; 0x596 <__stack+0x137>
					n = 1;
 592:	99 24       	eor	r9, r9
 594:	93 94       	inc	r9
				}

				if (n > MAX_LEN) {
 596:	f0 e1       	ldi	r31, 0x10	; 16
 598:	f9 15       	cp	r31, r9
 59a:	18 f4       	brcc	.+6      	; 0x5a2 <__stack+0x143>
					n = MAX_LEN;
 59c:	68 94       	set
 59e:	99 24       	eor	r9, r9
 5a0:	94 f8       	bld	r9, 4
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 5a2:	e1 2c       	mov	r14, r1
 5a4:	f1 2c       	mov	r15, r1
 5a6:	89 2d       	mov	r24, r9
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	e8 16       	cp	r14, r24
 5ac:	f9 06       	cpc	r15, r25
 5ae:	b4 f4       	brge	.+44     	; 0x5dc <__stack+0x17d>
					result[i] = readFromRegister(FIFODataReg);
 5b0:	58 01       	movw	r10, r16
 5b2:	ae 0c       	add	r10, r14
 5b4:	bf 1c       	adc	r11, r15
 5b6:	69 e0       	ldi	r22, 0x09	; 9
 5b8:	ce 01       	movw	r24, r28
 5ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 5be:	f5 01       	movw	r30, r10
 5c0:	80 83       	st	Z, r24
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 5c2:	ff ef       	ldi	r31, 0xFF	; 255
 5c4:	ef 1a       	sub	r14, r31
 5c6:	ff 0a       	sbc	r15, r31
 5c8:	ee cf       	rjmp	.-36     	; 0x5a6 <__stack+0x147>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
 5ca:	68 94       	set
 5cc:	cc 24       	eor	r12, r12
 5ce:	c1 f8       	bld	r12, 1
 5d0:	d1 2c       	mov	r13, r1
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__stack+0x17d>
				for (i=0; i<n; i++) {
					result[i] = readFromRegister(FIFODataReg);
				}
			}
			} else {
			status = MI_ERR;
 5d4:	68 94       	set
 5d6:	cc 24       	eor	r12, r12
 5d8:	c1 f8       	bld	r12, 1
 5da:	d1 2c       	mov	r13, r1
		}
	}
	return status;
}
 5dc:	c6 01       	movw	r24, r12
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	bf 90       	pop	r11
 5f0:	af 90       	pop	r10
 5f2:	9f 90       	pop	r9
 5f4:	8f 90       	pop	r8
 5f6:	7f 90       	pop	r7
 5f8:	6f 90       	pop	r6
 5fa:	5f 90       	pop	r5
 5fc:	08 95       	ret

000005fe <_ZN7MFRC52210requestTagEhPh>:

int MFRC522::requestTag(uint8_t mode, uint8_t *data) {
 5fe:	af 92       	push	r10
 600:	bf 92       	push	r11
 602:	cf 92       	push	r12
 604:	df 92       	push	r13
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	00 d0       	rcall	.+0      	; 0x614 <_ZN7MFRC52210requestTagEhPh+0x16>
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	5c 01       	movw	r10, r24
 61a:	16 2f       	mov	r17, r22
 61c:	6a 01       	movw	r12, r20
	int status, len;
	writeToRegister(BitFramingReg, 0x07);  // TxLastBists = BitFramingReg[2..0]
 61e:	47 e0       	ldi	r20, 0x07	; 7
 620:	6d e0       	ldi	r22, 0x0D	; 13
 622:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	data[0] = mode;
 626:	f6 01       	movw	r30, r12
 628:	10 83       	st	Z, r17
	status = commandTag(MFRC522_TRANSCEIVE, data, 1, data, &len);
 62a:	ce 01       	movw	r24, r28
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	7c 01       	movw	r14, r24
 630:	86 01       	movw	r16, r12
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	a6 01       	movw	r20, r12
 638:	6c e0       	ldi	r22, 0x0C	; 12
 63a:	c5 01       	movw	r24, r10
 63c:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status != MI_OK) || (len != 0x10)) {
 640:	00 97       	sbiw	r24, 0x00	; 0
 642:	31 f4       	brne	.+12     	; 0x650 <_ZN7MFRC52210requestTagEhPh+0x52>
 644:	29 81       	ldd	r18, Y+1	; 0x01
 646:	3a 81       	ldd	r19, Y+2	; 0x02
 648:	20 31       	cpi	r18, 0x10	; 16
 64a:	31 05       	cpc	r19, r1
 64c:	21 f4       	brne	.+8      	; 0x656 <_ZN7MFRC52210requestTagEhPh+0x58>
 64e:	05 c0       	rjmp	.+10     	; 0x65a <_ZN7MFRC52210requestTagEhPh+0x5c>
		status = MI_ERR;
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <_ZN7MFRC52210requestTagEhPh+0x5c>
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	90 e0       	ldi	r25, 0x00	; 0
	}

	return status;
}
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	df 90       	pop	r13
 66c:	cf 90       	pop	r12
 66e:	bf 90       	pop	r11
 670:	af 90       	pop	r10
 672:	08 95       	ret

00000674 <_ZN7MFRC52213antiCollisionEPh>:

int MFRC522::antiCollision(uint8_t *serial) {
 674:	af 92       	push	r10
 676:	bf 92       	push	r11
 678:	cf 92       	push	r12
 67a:	df 92       	push	r13
 67c:	ef 92       	push	r14
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	00 d0       	rcall	.+0      	; 0x68a <_ZN7MFRC52213antiCollisionEPh+0x16>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	5c 01       	movw	r10, r24
 690:	6b 01       	movw	r12, r22
	int status, i, len;
	uint8_t check = 0x00;

	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	6d e0       	ldi	r22, 0x0D	; 13
 696:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	serial[0] = MF1_ANTICOLL;
 69a:	83 e9       	ldi	r24, 0x93	; 147
 69c:	f6 01       	movw	r30, r12
 69e:	80 83       	st	Z, r24
	serial[1] = 0x20;
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	81 83       	std	Z+1, r24	; 0x01
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	7c 01       	movw	r14, r24
 6aa:	86 01       	movw	r16, r12
 6ac:	22 e0       	ldi	r18, 0x02	; 2
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	a6 01       	movw	r20, r12
 6b2:	6c e0       	ldi	r22, 0x0C	; 12
 6b4:	c5 01       	movw	r24, r10
 6b6:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 6ba:	dc 01       	movw	r26, r24
	len = len / 8; // len is in bits, and we want each byte.
 6bc:	49 81       	ldd	r20, Y+1	; 0x01
 6be:	5a 81       	ldd	r21, Y+2	; 0x02
 6c0:	55 23       	and	r21, r21
 6c2:	14 f4       	brge	.+4      	; 0x6c8 <_ZN7MFRC52213antiCollisionEPh+0x54>
 6c4:	49 5f       	subi	r20, 0xF9	; 249
 6c6:	5f 4f       	sbci	r21, 0xFF	; 255
 6c8:	55 95       	asr	r21
 6ca:	47 95       	ror	r20
 6cc:	55 95       	asr	r21
 6ce:	47 95       	ror	r20
 6d0:	55 95       	asr	r21
 6d2:	47 95       	ror	r20
	if (status == MI_OK) {
 6d4:	10 97       	sbiw	r26, 0x00	; 0
 6d6:	c9 f4       	brne	.+50     	; 0x70a <_ZN7MFRC52213antiCollisionEPh+0x96>
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	70 e0       	ldi	r23, 0x00	; 0
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 6de:	9a 01       	movw	r18, r20
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	31 09       	sbc	r19, r1
 6e4:	62 17       	cp	r22, r18
 6e6:	73 07       	cpc	r23, r19
 6e8:	44 f4       	brge	.+16     	; 0x6fa <_ZN7MFRC52213antiCollisionEPh+0x86>
			check ^= serial[i];
 6ea:	f6 01       	movw	r30, r12
 6ec:	e6 0f       	add	r30, r22
 6ee:	f7 1f       	adc	r31, r23
 6f0:	20 81       	ld	r18, Z
 6f2:	92 27       	eor	r25, r18
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 6f4:	6f 5f       	subi	r22, 0xFF	; 255
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	f2 cf       	rjmp	.-28     	; 0x6de <_ZN7MFRC52213antiCollisionEPh+0x6a>
			check ^= serial[i];
		}
		// The checksum should be the same as the one provided from the
		// tag (serial[4]).
		if (check != serial[i]) {
 6fa:	f6 01       	movw	r30, r12
 6fc:	e6 0f       	add	r30, r22
 6fe:	f7 1f       	adc	r31, r23
 700:	80 81       	ld	r24, Z
 702:	98 17       	cp	r25, r24
 704:	11 f0       	breq	.+4      	; 0x70a <_ZN7MFRC52213antiCollisionEPh+0x96>
			status = MI_ERR;
 706:	a2 e0       	ldi	r26, 0x02	; 2
 708:	b0 e0       	ldi	r27, 0x00	; 0
		}
	}

	return status;
}
 70a:	cd 01       	movw	r24, r26
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	bf 90       	pop	r11
 722:	af 90       	pop	r10
 724:	08 95       	ret

00000726 <_ZN7MFRC52212calculateCRCEPhiS0_>:

void MFRC522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 726:	af 92       	push	r10
 728:	bf 92       	push	r11
 72a:	cf 92       	push	r12
 72c:	df 92       	push	r13
 72e:	ef 92       	push	r14
 730:	ff 92       	push	r15
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	8c 01       	movw	r16, r24
 73c:	5b 01       	movw	r10, r22
 73e:	6a 01       	movw	r12, r20
 740:	79 01       	movw	r14, r18
	int i;
	uint8_t n;

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
 742:	44 e0       	ldi	r20, 0x04	; 4
 744:	65 e0       	ldi	r22, 0x05	; 5
 746:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer
 74a:	40 e8       	ldi	r20, 0x80	; 128
 74c:	6a e0       	ldi	r22, 0x0A	; 10
 74e:	c8 01       	movw	r24, r16
 750:	0e 94 ae 01 	call	0x35c	; 0x35c <_ZN7MFRC52210setBitMaskEhh>

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 754:	c0 e0       	ldi	r28, 0x00	; 0
 756:	d0 e0       	ldi	r29, 0x00	; 0
 758:	cc 15       	cp	r28, r12
 75a:	dd 05       	cpc	r29, r13
 75c:	54 f4       	brge	.+20     	; 0x772 <_ZN7MFRC52212calculateCRCEPhiS0_+0x4c>
		writeToRegister(FIFODataReg, data[i]);
 75e:	f5 01       	movw	r30, r10
 760:	ec 0f       	add	r30, r28
 762:	fd 1f       	adc	r31, r29
 764:	40 81       	ld	r20, Z
 766:	69 e0       	ldi	r22, 0x09	; 9
 768:	c8 01       	movw	r24, r16
 76a:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 76e:	21 96       	adiw	r28, 0x01	; 1
 770:	f3 cf       	rjmp	.-26     	; 0x758 <_ZN7MFRC52212calculateCRCEPhiS0_+0x32>
		writeToRegister(FIFODataReg, data[i]);
	}
	writeToRegister(CommandReg, MFRC522_CALCCRC);
 772:	43 e0       	ldi	r20, 0x03	; 3
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	c8 01       	movw	r24, r16
 778:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN7MFRC52215writeToRegisterEhh>

	// Wait for the CRC calculation to complete.
	i = 0xFF;
 77c:	cf ef       	ldi	r28, 0xFF	; 255
 77e:	d0 e0       	ldi	r29, 0x00	; 0
	do {
		n = readFromRegister(DivIrqReg);
 780:	65 e0       	ldi	r22, 0x05	; 5
 782:	c8 01       	movw	r24, r16
 784:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
		i--;
 788:	21 97       	sbiw	r28, 0x01	; 1
	} while ((i != 0) && !(n & 0x04));  //CRCIrq = 1
 78a:	11 f0       	breq	.+4      	; 0x790 <_ZN7MFRC52212calculateCRCEPhiS0_+0x6a>
 78c:	82 ff       	sbrs	r24, 2
 78e:	f8 cf       	rjmp	.-16     	; 0x780 <_ZN7MFRC52212calculateCRCEPhiS0_+0x5a>

	// Read the result from the CRC calculation.
	result[0] = readFromRegister(CRCResultRegL);
 790:	62 e2       	ldi	r22, 0x22	; 34
 792:	c8 01       	movw	r24, r16
 794:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 798:	f7 01       	movw	r30, r14
 79a:	80 83       	st	Z, r24
	result[1] = readFromRegister(CRCResultRegM);
 79c:	61 e2       	ldi	r22, 0x21	; 33
 79e:	c8 01       	movw	r24, r16
 7a0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN7MFRC52216readFromRegisterEh>
 7a4:	f7 01       	movw	r30, r14
 7a6:	81 83       	std	Z+1, r24	; 0x01
}
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	ff 90       	pop	r15
 7b2:	ef 90       	pop	r14
 7b4:	df 90       	pop	r13
 7b6:	cf 90       	pop	r12
 7b8:	bf 90       	pop	r11
 7ba:	af 90       	pop	r10
 7bc:	08 95       	ret

000007be <_ZN7MFRC5229selectTagEPh>:

uint8_t MFRC522::selectTag(uint8_t *serial) {
 7be:	cf 92       	push	r12
 7c0:	df 92       	push	r13
 7c2:	ef 92       	push	r14
 7c4:	ff 92       	push	r15
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
 7d2:	2b 97       	sbiw	r28, 0x0b	; 11
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	6c 01       	movw	r12, r24
	int i, status, len;
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
 7e0:	83 e9       	ldi	r24, 0x93	; 147
 7e2:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0x70;
 7e4:	80 e7       	ldi	r24, 0x70	; 112
 7e6:	8c 83       	std	Y+4, r24	; 0x04
	for (i = 0; i < 5; i++) {
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	85 30       	cpi	r24, 0x05	; 5
 7ee:	91 05       	cpc	r25, r1
 7f0:	7c f4       	brge	.+30     	; 0x810 <_ZN7MFRC5229selectTagEPh+0x52>
		buffer[i+2] = serial[i];
 7f2:	fc 01       	movw	r30, r24
 7f4:	32 96       	adiw	r30, 0x02	; 2
 7f6:	db 01       	movw	r26, r22
 7f8:	a8 0f       	add	r26, r24
 7fa:	b9 1f       	adc	r27, r25
 7fc:	2c 91       	ld	r18, X
 7fe:	43 e0       	ldi	r20, 0x03	; 3
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	4c 0f       	add	r20, r28
 804:	5d 1f       	adc	r21, r29
 806:	e4 0f       	add	r30, r20
 808:	f5 1f       	adc	r31, r21
 80a:	20 83       	st	Z, r18
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	ee cf       	rjmp	.-36     	; 0x7ec <_ZN7MFRC5229selectTagEPh+0x2e>
		buffer[i+2] = serial[i];
	}
	calculateCRC(buffer, 7, &buffer[7]);
 810:	9e 01       	movw	r18, r28
 812:	26 5f       	subi	r18, 0xF6	; 246
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	47 e0       	ldi	r20, 0x07	; 7
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	be 01       	movw	r22, r28
 81c:	6d 5f       	subi	r22, 0xFD	; 253
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	c6 01       	movw	r24, r12
 822:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7MFRC52212calculateCRCEPhiS0_>

	status = commandTag(MFRC522_TRANSCEIVE, buffer, 9, buffer, &len);
 826:	ce 01       	movw	r24, r28
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	7c 01       	movw	r14, r24
 82c:	8e 01       	movw	r16, r28
 82e:	0d 5f       	subi	r16, 0xFD	; 253
 830:	1f 4f       	sbci	r17, 0xFF	; 255
 832:	29 e0       	ldi	r18, 0x09	; 9
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	a8 01       	movw	r20, r16
 838:	6c e0       	ldi	r22, 0x0C	; 12
 83a:	c6 01       	movw	r24, r12
 83c:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status == MI_OK) && (len == 0x18)) {
 840:	89 2b       	or	r24, r25
 842:	31 f4       	brne	.+12     	; 0x850 <_ZN7MFRC5229selectTagEPh+0x92>
 844:	89 81       	ldd	r24, Y+1	; 0x01
 846:	9a 81       	ldd	r25, Y+2	; 0x02
 848:	48 97       	sbiw	r24, 0x18	; 24
 84a:	21 f4       	brne	.+8      	; 0x854 <_ZN7MFRC5229selectTagEPh+0x96>
		sak = buffer[0];
 84c:	8b 81       	ldd	r24, Y+3	; 0x03
 84e:	03 c0       	rjmp	.+6      	; 0x856 <_ZN7MFRC5229selectTagEPh+0x98>
	}
	else {
		sak = 0;
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	01 c0       	rjmp	.+2      	; 0x856 <_ZN7MFRC5229selectTagEPh+0x98>
 854:	80 e0       	ldi	r24, 0x00	; 0
	}

	return sak;
}
 856:	2b 96       	adiw	r28, 0x0b	; 11
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ff 90       	pop	r15
 86c:	ef 90       	pop	r14
 86e:	df 90       	pop	r13
 870:	cf 90       	pop	r12
 872:	08 95       	ret

00000874 <_ZN7MFRC5227haltTagEv>:

int MFRC522::haltTag() {
 874:	cf 92       	push	r12
 876:	df 92       	push	r13
 878:	ef 92       	push	r14
 87a:	ff 92       	push	r15
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	00 d0       	rcall	.+0      	; 0x886 <_ZN7MFRC5227haltTagEv+0x12>
 886:	00 d0       	rcall	.+0      	; 0x888 <_ZN7MFRC5227haltTagEv+0x14>
 888:	00 d0       	rcall	.+0      	; 0x88a <_ZN7MFRC5227haltTagEv+0x16>
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	6c 01       	movw	r12, r24
	int status, len;
	uint8_t buffer[4];

	buffer[0] = MF1_HALT;
 890:	80 e5       	ldi	r24, 0x50	; 80
 892:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0;
 894:	1c 82       	std	Y+4, r1	; 0x04
	calculateCRC(buffer, 2, &buffer[2]);
 896:	9e 01       	movw	r18, r28
 898:	2b 5f       	subi	r18, 0xFB	; 251
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	42 e0       	ldi	r20, 0x02	; 2
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	be 01       	movw	r22, r28
 8a2:	6d 5f       	subi	r22, 0xFD	; 253
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	c6 01       	movw	r24, r12
 8a8:	0e 94 93 03 	call	0x726	; 0x726 <_ZN7MFRC52212calculateCRCEPhiS0_>
	status = commandTag(MFRC522_TRANSCEIVE, buffer, 4, buffer, &len);
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	7c 01       	movw	r14, r24
 8b2:	8e 01       	movw	r16, r28
 8b4:	0d 5f       	subi	r16, 0xFD	; 253
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	24 e0       	ldi	r18, 0x04	; 4
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	a8 01       	movw	r20, r16
 8be:	6c e0       	ldi	r22, 0x0C	; 12
 8c0:	c6 01       	movw	r24, r12
 8c2:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 8c6:	8c 01       	movw	r16, r24
	clearBitMask(Status2Reg, 0x08);  // turn off encryption
 8c8:	48 e0       	ldi	r20, 0x08	; 8
 8ca:	68 e0       	ldi	r22, 0x08	; 8
 8cc:	c6 01       	movw	r24, r12
 8ce:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN7MFRC52212clearBitMaskEhh>
	return status;
 8d2:	c8 01       	movw	r24, r16
 8d4:	26 96       	adiw	r28, 0x06	; 6
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	1f 91       	pop	r17
 8e6:	0f 91       	pop	r16
 8e8:	ff 90       	pop	r15
 8ea:	ef 90       	pop	r14
 8ec:	df 90       	pop	r13
 8ee:	cf 90       	pop	r12
 8f0:	08 95       	ret

000008f2 <__tablejump2__>:
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	05 90       	lpm	r0, Z+
 8f8:	f4 91       	lpm	r31, Z
 8fa:	e0 2d       	mov	r30, r0
 8fc:	09 94       	ijmp

000008fe <_exit>:
 8fe:	f8 94       	cli

00000900 <__stop_program>:
 900:	ff cf       	rjmp	.-2      	; 0x900 <__stop_program>
